"use strict";(self.webpackChunkdocument=self.webpackChunkdocument||[]).push([[418],{9619:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var s=r(7458),a=r(9284),t=r(3154);const i={title:"Array",description:"Array Methods"},c="Array Methods",d={id:"methos/array",title:"Array",description:"Array Methods",source:"@site/docs/methos/array.mdx",sourceDirName:"methos",slug:"/methos/array",permalink:"/doumi/docs/methos/array",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Array",description:"Array Methods"},sidebar:"docSidebar",previous:{title:"Methods",permalink:"/doumi/docs/category/methods"},next:{title:"Collection",permalink:"/doumi/docs/methos/collection"}},l={},o=[{value:"chunk",id:"chunk",level:2},{value:"difference",id:"difference",level:2},{value:"intersection",id:"intersection",level:2},{value:"range",id:"range",level:2},{value:"shuffle",id:"shuffle",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"array-methods",children:"Array Methods"}),"\n",(0,s.jsx)(n.h2,{id:"chunk",children:"chunk"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Chunks an array into multiple arrays, each containing size or fewer items."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Since"}),": ",(0,s.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,s.jsx)(t.Z,{datas:[{param:"array",type:"any[]",description:"The array to process."},{param:"size",type:"number",description:"The length of each chunk"}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsx)(t.Z,{datas:[{type:"Array<any[]>",description:"Returns new array of chunks"}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"declare const chunk: <T>(array: T[], size: number) => T[][];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const array = [1, 2, 3, 4, 5, 6];\nchunk(array, 2); // [[1, 2], [3, 4], [5, 6]]\n"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"difference",children:"difference"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Creates an array of array values not included in the other given arrays. The order and references of result values are determined by the first array."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Since"}),": ",(0,s.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,s.jsx)(t.Z,{datas:[{param:"array",type:"any[]",description:"The array to inspect."},{param:"other",type:"...any[]",description:"The arrays to exclude."},{param:"[transformer]",type:"Function",description:"The transformer invoked per element for comparison."}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsx)(t.Z,{datas:[{type:"any[]",description:"Returns the new array of filtered values."}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"declare function difference<T>(\n  array: T[],\n  ...other: T[][] | [...T[][], (value: T, index: number) => any]\n): T[];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 3, 4, 5];\nconst other = [3, 5, 6];\ndifference(arr, other); // [1, 2, 4]\ndifference(arr, other, [2], (v) => v % 5); // [2, 4]\n"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"intersection",children:"intersection"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Creates an array of values that are included in all given arrays. The order and references of result values are determined by the first array."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Since"}),": ",(0,s.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,s.jsx)(t.Z,{datas:[{param:"array",type:"...any[]",description:"The array to inspect."},{param:"[transformer]",type:"Function",description:"The transformer invoked per element for comparison."}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsx)(t.Z,{datas:[{type:"any[]",description:"Returns the new array of intersecting values."}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"declare function intersection<T>(\n  ...arrays: T[][] | [...T[][], (value: T, index: number) => any]\n): T[];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 3, 4, 5];\nconst other = [3, 5, 6];\nintersection(arr, other); // [3, 5]\nintersection(arr, other, [5], (value) => value > 3); // [4, 5, 6]\n"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"range",children:"range"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"A function to create numbered lists of integers,"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Since"}),": ",(0,s.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,s.jsx)(t.Z,{datas:[{param:"start",type:"number",description:"The start value of array, if `arguments.length === 0`, array started at 0 value"},{param:"size",type:"number",description:"The size of array"}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsx)(t.Z,{datas:[{type:"number[]",description:"Returns `size` length array, started at `start`"}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"declare function range(size: number): number[];\ndeclare function range(start: number, size: number): number[];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"range(5); // [0, 1, 2, 3, 4]\nrange(3, 4); // [3, 4, 5, 6]\n"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"shuffle",children:"shuffle"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Creates an array of shuffled values, using knuth shuffle"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Since"}),": ",(0,s.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,s.jsx)(t.Z,{datas:[{param:"array",type:"any[]",description:"The array to query"}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsx)(t.Z,{datas:[{type:"any[]",description:"Returns the new shuffled array."}]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"declare const shuffle: <T>(array: T[]) => T[];\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);