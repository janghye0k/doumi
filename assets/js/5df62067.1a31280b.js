"use strict";(self.webpackChunkdocument=self.webpackChunkdocument||[]).push([[586],{9954:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var c=r(7458),l=r(9284),i=r(3154);const a={title:"Collection",description:"Collection Methods"},t="Collection Methods",o={id:"methos/collection",title:"Collection",description:"Collection Methods",source:"@site/docs/methos/collection.mdx",sourceDirName:"methos",slug:"/methos/collection",permalink:"/doumi/docs/methos/collection",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Collection",description:"Collection Methods"},sidebar:"docSidebar",previous:{title:"Array",permalink:"/doumi/docs/methos/array"},next:{title:"DOM",permalink:"/doumi/docs/methos/dom"}},s={},d=[{value:"every",id:"every",level:2},{value:"filter",id:"filter",level:2},{value:"find",id:"find",level:2},{value:"forEach",id:"foreach",level:2},{value:"forEachRight",id:"foreachright",level:2},{value:"groupBy",id:"groupby",level:2},{value:"map",id:"map",level:2},{value:"reduce",id:"reduce",level:2},{value:"reduceRight",id:"reduceright",level:2},{value:"some",id:"some",level:2}];function u(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"collection-methods",children:"Collection Methods"}),"\n",(0,c.jsx)(n.h2,{id:"every",children:"every"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Checks if predicate returns truthy for all element of collection."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"predicate",type:"Function",description:"The function invoked per iteration."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"boolean",description:"Returns true if all elements pass the predicate check, else false."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function every<T extends ArrayLike<any>>(\n  collection: T,\n  predicate: (value: ArrayLikeValue<T>, index: number, collection: T) => boolean\n): boolean;\ndeclare function every<T extends Dictionary<any>>(\n  collection: T,\n  predicate: (value: DictionaryValue<T>, key: string, collection: T) => boolean\n): boolean;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 5];\nevery(arr, (value) => value < 10); // true\n\nconst obj = { a: 1, b: 2 };\nevery(arr, (_, key) => key !== 'a'); // false\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"filter",children:"filter"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Iterates over elements of collection, returning an array of all elements predicate returns truthy for"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over"},{param:"predicate",type:"Function",description:"The function invoked per iteration"}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"any[]",description:"Returns the new filterd array"}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function filter<T extends ArrayLike<any>>(\n  collection: T,\n  predicate: (value: ArrayLikeValue<T>, index: number, collection: T) => boolean\n): ArrayLikeValue<T>[];\ndeclare function filter<T extends Dictionary<any>>(\n  collection: T,\n  predicate: (value: DictionaryValue<T>, key: string, collection: T) => boolean\n): DictionaryValue<T>[];\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 3];\nfilter(arr, (value, index) => index === 1); // [1, 3]\n\nconst obj = { a: 1, b: 'str' };\nfilter(obj, (value, key) => typeof value === 'string'); // ['str']\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"find",children:"find"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Iterates over elements of collection, returning the first element predicate returns truthy for."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"predicate",type:"Function",description:"The function invoked per iteration."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"boolean",description:"Returns the matched element, else `undefined`."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function find<T extends ArrayLike<any>>(\n  collection: T,\n  predicate: (value: ArrayLikeValue<T>, index: number, collection: T) => boolean\n): ArrayLikeValue<T> | undefined;\ndeclare function find<T extends Dictionary<any>>(\n  collection: T,\n  predicate: (value: DictionaryValue<T>, key: string, collection: T) => boolean\n): DictionaryValue<T> | undefined;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 13];\nfind(arr, (value) => value > 10); // 13\n\nconst obj = { a: 1, b: 2 };\nfind(arr, (_, key) => key === 'c'); // undefined\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"foreach",children:"forEach"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Iterates over elements of collection and invokes iteratee for each element."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"callback",type:"Function",description:"The function invoked per iteration."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function forEach<T extends ArrayLike<any>>(\n  collection: T,\n  callback: (value: ArrayLikeValue<T>, index: number, collection: T) => void\n): void;\ndeclare function forEach<T extends Dictionary<any>>(\n  collection: T,\n  callback: (value: DictionaryValue<T>, key: string, collection: T) => void\n): void;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1];\nforEach(arr, (value, index) => console.log(value, index)); // 1, 0\n\nconst obj = { a: 1 };\nforEach(obj, (value, key) => console.log(value, key)); // 1, 'a'\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"foreachright",children:"forEachRight"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Iterates over elements of collection and invokes iteratee for each element."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"callback",type:"Function",description:"The function invoked per iteration."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function forEachRight<T extends ArrayLike<any>>(\n  collection: T,\n  callback: (value: ArrayLikeValue<T>, index: number, collection: T) => void\n): void;\ndeclare function forEachRight<T extends Dictionary<any>>(\n  collection: T,\n  callback: (value: DictionaryValue<T>, key: string, collection: T) => void\n): void;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1];\nforEachRight(arr, (value, index) => console.log(value, index)); // 1, 0\n\nconst obj = { a: 1 };\nforEachRight(obj, (value, key) => console.log(value, key)); // 1, 'a'\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"groupby",children:"groupBy"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Iterates over elements of collection and invokes iteratee for each element."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"callback",type:"Function",description:"The function invoked per iteration."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"object[]>",description:"Returns new grouped array"}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function groupBy<T extends ArrayLike<any>>(\n  collection: T,\n  callback: (value: ArrayLikeValue<T>, index: number, collection: T) => string\n): Record<string, ArrayLikeValue<T>[]>;\ndeclare function groupBy<T extends Dictionary<any>>(\n  collection: T,\n  callback: (value: DictionaryValue<T>, key: string, collection: T) => string\n): Record<string, DictionaryValue<T>[]>;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const students = [\n  { name: 'john', class: 'A', score: 100 },\n  { name: 'alice', class: 'B', score: 91 },\n  { name: 'smith', class: 'C', score: 65 },\n  { name: 'gale', class: 'A', score: 74 },\n];\n\nconst results = groupBy(students, (value) =>\n  value.score < 70 ? 'fail' : 'pass'\n);\nresults.fail; // [{ name: 'smith', class: 'C', score: 65 }]\nresults.pass.length; // 3\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"map",children:"map"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Iterates over elements of collection and invokes iteratee for each element."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"callback",type:"Function",description:"The function invoked per iteration."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"any[]",description:"Returns the new mapped array."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function map<T = any, O extends ArrayLike<any> = ArrayLike<any>>(\n  collection: O,\n  callback: (value: ArrayLikeValue<O>, index: number, collection: O) => T\n): T[];\ndeclare function map<T = any, O extends Dictionary<any> = Dictionary<any>>(\n  collection: O,\n  callback: (value: DictionaryValue<O>, key: string, collection: O) => T\n): T[];\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 3];\nmap(arr, (value, index) => value + index); // [1, 3, 5]\n\nconst obj = { a: 1, b: 2, c: 3 };\nmap(obj, (value, key) => value + key); // ['a1', 'b2', 'c3']\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"reduce",children:"reduce"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:'Executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.'}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:'The first time that the callback is run there is no "return value of the previous calculation". If supplied, an initial value may be used in its place. Otherwise the collection\'s first element is used as the initial value'}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"reducer",type:"Function",description:"The function invoked per iteration."},{param:"[accumulator]",type:"any",description:"The initial value."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"any",description:"Returns the accumulated value."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function reduce<T extends ArrayLike<any> = ArrayLike<any>>(\n  collection: T,\n  reducer: (\n    accumulator: ArrayLikeValue<T>,\n    value: ArrayLikeValue<T>,\n    index: number,\n    collection: T\n  ) => ArrayLikeValue<T>,\n  accumulator?: ArrayLikeValue<T>\n): ArrayLikeValue<T>;\ndeclare function reduce<T extends ArrayLike<any> = ArrayLike<any>, V = any>(\n  collection: T,\n  reducer: (\n    accumulator: V,\n    value: ArrayLikeValue<T>,\n    index: number,\n    collection: T\n  ) => V,\n  accumulator: V\n): V;\ndeclare function reduce<T extends Dictionary<any> = Dictionary<any>>(\n  collection: T,\n  reducer: (\n    accumulator: DictionaryValue<T>,\n    value: DictionaryValue<T>,\n    key: string,\n    collection: T\n  ) => DictionaryValue<T>,\n  accumulator?: DictionaryValue<T>\n): DictionaryValue<T>;\ndeclare function reduce<T extends Dictionary<any> = Dictionary<any>, V = any>(\n  collection: T,\n  reducer: (\n    accumulator: V,\n    value: DictionaryValue<T>,\n    key: string,\n    collection: T\n  ) => V,\n  accumulator: V\n): V;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 3];\nreduce(arr, (acc, value) => `${acc}_${value}`, ''); // '_1_2_3'\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"reduceright",children:"reduceRight"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:'Executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.'}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:'The first time that the callback is run there is no "return value of the previous calculation". If supplied, an initial value may be used in its place. Otherwise the collection\'s last element is used as the initial value'}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"reducer",type:"Function",description:"The function invoked per iteration."},{param:"[accumulator]",type:"any",description:"The initial value."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"any",description:"Returns the accumulated value."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function reduceRight<T extends ArrayLike<any> = ArrayLike<any>>(\n  collection: T,\n  reducer: (\n    accumulator: ArrayLikeValue<T>,\n    value: ArrayLikeValue<T>,\n    index: number,\n    collection: T\n  ) => ArrayLikeValue<T>,\n  accumulator?: ArrayLikeValue<T>\n): ArrayLikeValue<T>;\ndeclare function reduceRight<\n  T extends ArrayLike<any> = ArrayLike<any>,\n  V = any,\n>(\n  collection: T,\n  reducer: (\n    accumulator: V,\n    value: ArrayLikeValue<T>,\n    index: number,\n    collection: T\n  ) => V,\n  accumulator: V\n): V;\ndeclare function reduceRight<T extends Dictionary<any> = Dictionary<any>>(\n  collection: T,\n  reducer: (\n    accumulator: DictionaryValue<T>,\n    value: DictionaryValue<T>,\n    key: string,\n    collection: T\n  ) => DictionaryValue<T>,\n  accumulator?: DictionaryValue<T>\n): DictionaryValue<T>;\ndeclare function reduceRight<\n  T extends Dictionary<any> = Dictionary<any>,\n  V = any,\n>(\n  collection: T,\n  reducer: (\n    accumulator: V,\n    value: DictionaryValue<T>,\n    key: string,\n    collection: T\n  ) => V,\n  accumulator: V\n): V;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 3];\nreduceRight(arr, (acc, value) => `${acc}_${value}`, ''); // '_3_2_1'\n"})}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h2,{id:"some",children:"some"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"Checks if predicate returns truthy for any element of collection."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Since"}),": ",(0,c.jsx)(n.em,{children:"0.1.0"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,c.jsx)(i.Z,{datas:[{param:"collection",type:{value:"Collection",link:"../types#collection"},description:"The collection to iterate over."},{param:"predicate",type:"Function",description:"The function invoked per iteration."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Returns"})}),"\n",(0,c.jsx)(i.Z,{datas:[{type:"boolean",description:"Returns true if any element passes the predicate check, else false."}]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Declaration"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"declare function some<T extends ArrayLike<any>>(\n  collection: T,\n  predicate: (value: ArrayLikeValue<T>, index: number, collection: T) => boolean\n): boolean;\ndeclare function some<T extends Dictionary<any>>(\n  collection: T,\n  predicate: (value: DictionaryValue<T>, key: string, collection: T) => boolean\n): boolean;\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const arr = [1, 2, 13];\nsome(arr, (value) => value > 10); // true\n\nconst obj = { a: 1, b: 2 };\nsome(arr, (_, key) => key === 'c'); // false\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}}}]);